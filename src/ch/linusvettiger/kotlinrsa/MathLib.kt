package ch.linusvettiger.kotlinrsa

import java.math.BigInteger

class EEAResult(var gcd: BigInteger, var x0: BigInteger, var y0: BigInteger) {
    override fun toString(): String {
        return "GCD: %d, X0: %d, Y0: %d".format(gcd, x0, y0)
    }

    /**
     * Checks equality of EEAResults by comparing all Properties
     */
    override fun equals(other: Any?): Boolean {
        if (other !is EEAResult) {
            return false
        }
        return other.gcd == gcd && other.x0 == x0 && other.y0 == y0
    }

    /**
     * Automatically generated by IntelliJ
     */
    override fun hashCode(): Int {
        var result = gcd.hashCode()
        result = 31 * result + x0.hashCode()
        result = 31 * result + y0.hashCode()
        return result
    }
}

fun eea(num1: BigInteger, num2: BigInteger): EEAResult {
    var a: BigInteger
    var b: BigInteger = num2
    var x0 = 1.toBigInteger()
    var y0 = 0.toBigInteger()
    var x1 = 0.toBigInteger()
    var y1 = 1.toBigInteger()
    var q = num1 / num2
    var rest = num1 % num2

    while (rest > 0.toBigInteger()) {
        val tmpX1 = x1
        val tmpY1 = y1
        x1 = x0-x1*q
        y1 = y0-y1*q
        x0 = tmpX1
        y0 = tmpY1

        a=b
        b=rest

        q = a / b
        rest = a % b
    }
    if (x1 < 0.toBigInteger()) x1 = num2+x1
    if (y1 < 0.toBigInteger()) y1 = num1+y1
    return EEAResult(b, x1, y1)
}

fun fea() {

}